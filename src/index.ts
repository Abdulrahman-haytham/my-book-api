// src/index.ts

// -------------------
//  1. ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช
// -------------------
import express from 'express';
import { ApolloServer } from 'apollo-server-express';
import dotenv from 'dotenv';
import http from 'http';
import { GraphQLError } from 'graphql'; // ููู ูุงุณุชุฎุฏุงูู ูู formatError

// -------------------
//  2. ุงุณุชูุฑุงุฏ ููููุงุช ุงูุชุทุจูู
// -------------------
import { typeDefs } from './graphql/typeDefs';
import { resolvers } from './graphql/resolvers';
import { prisma } from './prisma';
import { getUserId } from './utils/auth';

// -------------------
//  3. ุชููุฆุฉ ุฃูููุฉ
// -------------------
// ุชุญููู ุงููุชุบูุฑุงุช ูู ููู .env
dotenv.config();

/**
 * ุฏุงูุฉ ุฑุฆูุณูุฉ ุบูุฑ ูุชุฒุงููุฉ ูุจุฏุก ุชุดุบูู ุงูุฎุงุฏู.
 */
async function startApolloServer() {
  const app = express();
  const httpServer = http.createServer(app);

  // -------------------
  //  4. ุฅุนุฏุงุฏ Apollo Server
  // -------------------
  const server = new ApolloServer({
    typeDefs,
    resolvers,
    /**
     * ุฏุงูุฉ ุงูู context ูุชูููุฑ ุงููุตูู ุฅูู prisma ู userId ููู resolver.
     */
    context: ({ req }) => {
      const token = req.headers.authorization || '';
      const userId = getUserId(token);
      return {
        prisma,
        userId,
      };
    },

    /**
     *  === ูุนุงูุฌ ุงูุฃุฎุทุงุก ุงููุฑูุฒู ===
     * ูุฐู ุงูุฏุงูุฉ ุชุนุชุฑุถ ูู ุฎุทุฃ ูุจู ุฅุฑุณุงูู ููุนููู.
     * ุชุชูุญ ููุง ุงูุชุญูู ุงููุงูู ูู ุดูู ุงูุฎุทุฃ ุงูููุงุฆู.
     */
    formatError: (error: GraphQLError) => {
      // ุทุจุงุนุฉ ุงูุฎุทุฃ ุงููุงูู ูู ุงููููุณูู (ูููุทูุฑูู ููุท)
      // ูุฐุง ูุณุงุนุฏ ูู ุชุตุญูุญ ุงูุฃุฎุทุงุก ุฃุซูุงุก ุงูุชุทููุฑ.
      console.error("--- GraphQL Error ---");
      console.error("Message:", error.message);
      console.error("Code:", error.extensions?.code);
      console.error("Path:", error.path);
      console.error("---------------------");

      // ุฅุฐุง ูุงู ุงูุฎุทุฃ ูู ูู ุงูุฃููุงุน ุงูุชู ูุซู ุจูุง (ูุซู UserInputError, AuthenticationError)
      // ูุฅู Apollo ูููู ุจุชูุณูููุง ุจุดูู ุฌูุฏุ ูุฐุง ูุชุฑููุง ููุง ูู.
      if (
        error.extensions?.code === 'BAD_USER_INPUT' ||
        error.extensions?.code === 'UNAUTHENTICATED' ||
        error.extensions?.code === 'FORBIDDEN'
      ) {
        return {
          message: error.message,
          locations: error.locations,
          path: error.path,
          extensions: { code: error.extensions.code },
        };
      }

      // ุฅุฐุง ูุงู ุงูุฎุทุฃ ุบูุฑ ูุชููุน (ุฎุทุฃ ูู ุงูุณูุฑูุฑุ ูุดููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ ุฅูุฎ)
      // ูุง ููุณุฑูุจ ุชูุงุตููู ุงูุญุณุงุณุฉ ูู ุจูุฆุฉ ุงูุฅูุชุงุฌ (Production)
      if (process.env.NODE_ENV === 'production') {
        // ุฃุฑุณู ุฑุณุงูุฉ ุนุงูุฉ ูุขููุฉ ูููุณุชุฎุฏู
        return new GraphQLError('Sorry, something went wrong on our end.', {
          extensions: { code: 'INTERNAL_SERVER_ERROR' },
        });
      }

      // ูู ูุถุน ุงูุชุทููุฑ (Development)ุ ุฃุฑุณู ุงูุฎุทุฃ ูุงููุงู ูููุณุงุนุฏุฉ ูู ุงูุชุตุญูุญ
      return error;
    },
  });

  // -------------------
  //  5. ุฑุจุท Apollo ูุน Express
  // -------------------
  await server.start();
  server.applyMiddleware({
    app,
    path: '/graphql',
  });

  // -------------------
  //  6. ุชุดุบูู ุงูุฎุงุฏู
  // -------------------
  const PORT = process.env.PORT || 4000;
  
  await new Promise<void>((resolve) => httpServer.listen({ port: PORT }, resolve));
  
  console.log(`๐ Server ready at http://localhost:${PORT}${server.graphqlPath}`);
}

// -------------------
//  7. ุจุฏุก ุงูุชุทุจูู
// -------------------
startApolloServer().catch(error => {
  console.error('๐ฅ Failed to start server:', error);
  process.exit(1); // ุฅููุงุก ุงูุนูููุฉ ุฅุฐุง ูุดู ุจุฏุก ุงูุชุดุบูู
});